generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blockchain {
  id           String         @id @default(uuid())
  name         String
  chainId      String        @unique
  wallets      Wallet[]       @relation("WalletChain")
  transactions Transaction[]  @relation("TransactionChain")
  tokens       Token[]        @relation("TokenChain")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("blockchains")
}

model Wallet {
  id                  String        @id @default(uuid())
  balance             String
  address             String        @unique
  encryptedPrivateKey String        @unique
  user                User          @relation(fields: [userId], references: [id], name: "UserWallets")
  userId              String
  chainType           ChainType
  network             Network
  additionalData      Json?         
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  blockchain          Blockchain?   @relation(fields: [blockchainId], references: [id], name: "WalletChain")
  blockchainId        String?
  transactions        Transaction[] @relation("WalletTransactions")
  tokens              Token[]       @relation("WalletTokens")
  @@map("wallets")
}

model WalletContract {
  id                  String        @id @default(uuid())
  address             String        @unique
  blockchainId        String?
  reserved            Boolean       @default(false)
  chainType           ChainType
  network             Network

}

model Token {
  id              String         @id @default(uuid())
  symbol          String
  contractAddress String?
  wallet          Wallet         @relation(fields: [walletId], references: [id], name: "WalletTokens")
  walletId        String
  chainType       ChainType
  network         Network
  transactions    Transaction[]  @relation("TokenTransactions")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  blockchain      Blockchain?    @relation(fields: [blockchainId], references: [id], name: "TokenChain")
  blockchainId    String?
  @@map("tokens")
}

model Transaction {
  id         String     @id @default(uuid())
  txHash     String
  from       String
  to         String
  amount     Float
  transactionType TransactionType
  wallet     Wallet     @relation(fields: [walletId], references: [id], name: "WalletTransactions")
  walletId   String
  chainType  ChainType
  network    Network
  status     TransactionStatus
  confirmations Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blockchain Blockchain? @relation(fields: [blockchainId], references: [id], name: "TransactionChain")
  blockchainId String?
  token      Token?     @relation(fields: [tokenId], references: [id], name: "TokenTransactions")
  tokenId    String?
  @@map("transactions")
}


model User {
  id                String        @id @default(uuid())
  firstName         String
  lastName          String
  email             String?       @unique
  phoneNumber       String?       @unique
  encryptedPassword String
  userRole          UserRole      @default(USER)
  wallets           Wallet[]      @relation("UserWallets")
  sellOrders        TradeOrder[]  @relation("UserSellOrders")
  buyOrders         TradeOrder[]  @relation("UserBuyOrders")
  sessions          Session[]     @relation("UserSessions")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], name: "UserSessions")
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}


model Sms {
  id        String   @id @default(uuid())
  to        String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sms")
}

model TradeOrder {
  id           String      @id @default(uuid())
  seller       User        @relation("UserSellOrders", fields: [sellerId], references: [id])
  sellerId     String
  buyer        User        @relation("UserBuyOrders", fields: [buyerId], references: [id])
  buyerId      String
  balance      String
  pricePerUnit String
  currencyType Currency
  tradeStatus  TradeStatus
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("trade_orders")
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
}

enum Currency {
  Ethereum
  BnbChain
  Polygon
  Avalanche
  Fantom
  Harmony
  Elrond
  Solana 
  Bitcoin
  Litecoin
  Dogecoin
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TradeStatus {
  OPEN 
  IN_PROGRESS 
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  APPROVED
  PROCESSED
  PROCESSING
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

enum ChainType {
  EVM
  BTC
  LTC
  DOGE
}

enum Network {
  MAINNET
  TESTNET
}
